@page "/"
@inject IJSRuntime JSRuntime
@using System.Text.Json
@using RazorBarcodeLibrary

<PageTitle>Index</PageTitle>

<h1>Razor Barcode Library</h1>
<div id="loading-indicator" class="loading-indicator" style="@(isLoading ? "display: flex;" : "display: none;")">
    <div class="spinner"></div>
</div>

<div class="connection">

    <div class="row">
        <label>License key: </label>
        <div class="filler"></div>
        <input type="text" placeholder="@licenseKey" @bind="licenseKey">
        <button @onclick="Activate">Activate SDK</button>
    </div>

    <p>SDK Version: @version</p>

    <div class="row">
        <select @bind="SelectedOption">
            <option value="Barcode Reader">Barcode Reader</option>
            <option value="Barcode Scanner">Barcode Scanner</option>
        </select>
    </div>
</div>

<div class="container">
    <div>
        @if (_selectedOption == "Barcode Reader")
        {
            <div>
                <InputFile OnChange="LoadImage" />
                @if (imageSrc != null)
                {
                    <div id="imageview">
                        <img id="image" src="@imageSrc" />
                        <canvas id="overlay"></canvas>
                    </div>
                }
            </div>

            <div>
                <button @onclick="Decode">Read Barcode</button>
            </div>
        }
        else if (_selectedOption == "Barcode Scanner")
        {
            <div class="row">
                <div>
                    <button @onclick="GetCameras">Get Cameras</button>
                    <select id="sources" @bind="selectedValue">
                        @foreach (var camera in cameras)
                        {
                            <option value="@camera.DeviceId">@camera.Label</option>
                        }
                    </select>
                    <button @onclick="OpenCamera">Open Camera</button>
                </div>

            </div>

            <div id="videoview">
                <div class="dce-video-container" id="videoContainer"></div>
                <canvas id="videoOverlay"></canvas>
            </div>
        }
        <div>
            <p>@result</p>
        </div>
        
    </div> 
</div>

@code {
    private bool isLoading = false;
    BarcodeReader? reader;
    BarcodeScanner? scanner;
    BarcodeJsInterop? barcodeJsInterop;
    private MarkupString result;
    private string version = "N/A";
    private string? imageSrc;
    private string licenseKey = "DLS2eyJoYW5kc2hha2VDb2RlIjoiMjAwMDAxLTE2NDk4Mjk3OTI2MzUiLCJvcmdhbml6YXRpb25JRCI6IjIwMDAwMSIsInNlc3Npb25QYXNzd29yZCI6IndTcGR6Vm05WDJrcEQ5YUoifQ==";
    private string _selectedOption = "Barcode Reader";
    private string selectedValue { get; set; } = string.Empty;
    private List<Camera> cameras = new List<Camera>();
    private DotNetObjectReference<Index>? objRef;

    public string SelectedOption
    {
        get => _selectedOption;
        set
        {
            if (_selectedOption != value)
            {
                _selectedOption = value;
                var _ = OnChange(); 
            }
        }
    }

    private async Task OnChange()
    {
        result = new MarkupString("");

        if (scanner != null && _selectedOption == "Barcode Reader")
        {
            await scanner.CloseCamera();
        }
    }

    private async Task LoadImage(InputFileChangeEventArgs e)
    {
        result = new MarkupString("");
        if (barcodeJsInterop != null) await barcodeJsInterop.ClearCanvas("overlay");
        var imageFiles = e.GetMultipleFiles();
        var format = "image/png"; 

        if (imageFiles.Count > 0)
        {
            var file = imageFiles.First();
            var maxAllowedSize = 20 * 1024 * 1024;
            var buffer = new byte[file.Size];
            await file.OpenReadStream(maxAllowedSize).ReadAsync(buffer);

            imageSrc = $"data:{format};base64,{Convert.ToBase64String(buffer)}";
        }
    }

    protected override async Task OnInitializedAsync()
    {
        barcodeJsInterop = new BarcodeJsInterop(JSRuntime);
        await barcodeJsInterop.LoadJS();
    }

    public async Task Decode()
    {
        if (barcodeJsInterop == null || imageSrc == null || reader == null) return;
        try
        {
            isLoading = true;
            IJSObjectReference canvas = await barcodeJsInterop.Base64ToCanvas(imageSrc);
            // List<BarcodeResult> results = await reader.DecodeCanvas(canvas);

            List<BarcodeResult> results = await reader.DecodeBase64(imageSrc);
            if (results.Count > 0)
            {
                string text = "";
                foreach (BarcodeResult result in results)
                {
                    text += "format: " + result.Format + ", ";
                    text += "text: " + result.Text + "<br>";
                }
                result = new MarkupString(text);

                await barcodeJsInterop.DrawCanvas("overlay", reader.SourceWidth, reader.SourceHeight, results);
            }

        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }

        isLoading = false;
    }

    public async Task Activate()
    {
        if (barcodeJsInterop == null) return;
        isLoading = true;
        await barcodeJsInterop.SetLicense(licenseKey);
        await barcodeJsInterop.LoadWasm();
        version = await barcodeJsInterop.GetVersion();
        StateHasChanged();
        reader = await barcodeJsInterop.CreateBarcodeReader();
        if (objRef != null)
        {
            scanner = await barcodeJsInterop.CreateBarcodeScanner((object)objRef, "OnResultReady");
        }

        isLoading = false;
        // string parameters = await reader.GetParameters();
        // Console.WriteLine(parameters);

        // int ret = await reader.SetParameters(parameters);
        // Console.WriteLine(ret);
    }

    public async Task GetCameras()
    {
        if (barcodeJsInterop == null || scanner == null) return;
        try
        {
            isLoading = true;
            cameras = await scanner.GetCameras();
            if (cameras.Count >= 0)
            {
                selectedValue = cameras[0].Label;
            }

        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }

        isLoading = false;
    }

    public async Task OpenCamera()
    {
        if (barcodeJsInterop == null || scanner == null) return;
        try
        {
            isLoading = true;
            await scanner.SetVideoElement("videoContainer");

            int selectedIndex = cameras.FindIndex(camera => camera.Label == selectedValue);
            await scanner.OpenCamera(cameras[selectedIndex]);
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }

        isLoading = false;
    }

    [JSInvokable]
    public Task OnResultReady(object message)
    {
        // if (message == null) return Task.CompletedTask;
        List<BarcodeResult> results = BarcodeResult.WrapResult((JsonElement)message);
        if (results.Count > 0)
        {
            string text = "";
            foreach (BarcodeResult result in results)
            {
                text += "format: " + result.Format + ", ";
                text += "text: " + result.Text + "<br>";
            }
            result = new MarkupString(text);
        }
        StateHasChanged();
        return Task.CompletedTask;
    }

    protected override void OnInitialized()
    {
        objRef = DotNetObjectReference.Create(this);
    }

    public void Dispose()
    {
        objRef?.Dispose();
    }
}