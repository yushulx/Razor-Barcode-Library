@page "/"
@inject IJSRuntime JSRuntime
@using System.Text.Json
@using RazorBarcodeLibrary

<PageTitle>Index</PageTitle>

<h1>Razor Barcode Library</h1>
<a>SDK Version: @version</a>

<div>
    <InputFile OnChange="LoadImage" />
    @if (imageSrc != null)
    {
        <div id="imageview">
            <img id="image" src="@imageSrc" />
            <canvas id="overlay"></canvas>
        </div>
    }
</div>

<div>
    <button @onclick="Decode">Read Barcode</button>
    <p>@result</p>
</div>

@code {
    BarcodeReader? reader;
    BarcodeJsInterop? barcodeJsInterop;
    private MarkupString result;
    private string version = "N/A";
    private string? imageSrc;

    private async Task LoadImage(InputFileChangeEventArgs e)
    {
        result = new MarkupString("");
        if (barcodeJsInterop != null) await barcodeJsInterop.ClearCanvas("overlay");
        var imageFiles = e.GetMultipleFiles();
        var format = "image/png"; 

        if (imageFiles.Count > 0)
        {
            var file = imageFiles.First();
            var maxAllowedSize = 20 * 1024 * 1024;
            var buffer = new byte[file.Size];
            await file.OpenReadStream(maxAllowedSize).ReadAsync(buffer);

            imageSrc = $"data:{format};base64,{Convert.ToBase64String(buffer)}";
        }
    }

    protected override async Task OnInitializedAsync()
    {
        barcodeJsInterop = new BarcodeJsInterop(JSRuntime);
        await barcodeJsInterop.InitializeAsync();
        await barcodeJsInterop.SetLicense("DLS2eyJoYW5kc2hha2VDb2RlIjoiMjAwMDAxLTE2NDk4Mjk3OTI2MzUiLCJvcmdhbml6YXRpb25JRCI6IjIwMDAwMSIsInNlc3Npb25QYXNzd29yZCI6IndTcGR6Vm05WDJrcEQ5YUoifQ==");
        await barcodeJsInterop.LoadWasm();
        version = await barcodeJsInterop.GetVersion();
        StateHasChanged();
        reader = await barcodeJsInterop.CreateBarcodeReader();
        // string parameters = await reader.GetParameters();
        // Console.WriteLine(parameters);

        // int ret = await reader.SetParameters(parameters);
        // Console.WriteLine(ret);
    }

    public async Task Decode()
    {
        if (barcodeJsInterop == null || imageSrc == null || reader == null) return;
        try
        {
            IJSObjectReference canvas = await barcodeJsInterop.Base64ToCanvas(imageSrc);
            // List<BarcodeResult> results = await reader.DecodeCanvas(canvas);

            List<BarcodeResult> results = await reader.DecodeBase64(imageSrc);
            if (results.Count > 0)
            {
                string text = "";
                List<Dictionary<string, object>> output = new List<Dictionary<string, object>>();
                foreach (BarcodeResult result in results)
                {
                    text += "format: " + result.Format + ", ";
                    text += "text: " + result.Text + "<br>";
                    output.Add(result.ToJson());
                }
                result = new MarkupString(text);

                await barcodeJsInterop.DrawCanvas("overlay", reader.SourceWidth, reader.SourceHeight, output);
            }
            
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }
}